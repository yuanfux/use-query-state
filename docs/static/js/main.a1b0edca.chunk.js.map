{"version":3,"sources":["useQueryState/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["isUndefinedOrNull","v","undefined","isSame","var1","var2","toString","TYPE_EMPTY_VALUE_MAP","isValidType","value","allowNullAndUndefined","Array","isArray","Object","keys","indexOf","console","log","Error","reducer","state","action","type","payload","currentQueryValue","key","normalizedValue","newValue","useQueryState","defaultValue","varName","delay","location","useLocation","history","useHistory","useReducer","dispatch","timer","useRef","isPending","isChanged","clearTimer","useCallback","current","clearTimeout","manipulateHistory","func","setTimeout","useEffect","search","queryValue","queryString","arrayFormat","setVar","pathname","parsedQuery","queryVar","newSearch","bind","RangePicker","DatePicker","tsToMoment","ts","moment","PURPOSE_OPTIONS","text","UserForm","name","setName","gender","setGender","travelByYourself","setTravelByYourself","currency","setCurrency","purpose","setPurpose","startTime","setStartTime","endTime","setEndTime","layout","labelCol","span","wrapperCol","Item","label","placeholder","style","width","onChange","evt","target","Option","Group","tipFormatter","min","max","marks","0","10","30","50","70","90","100","map","p","length","offset","className","to","Header","App","bannerColor","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1b0edca.chunk.js","sourcesContent":["import { useReducer, useEffect, useRef, useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport * as queryString from 'query-string';\n\ntype Action = 'push' | 'replace';\n\ntype Value = string | boolean | number | string[];\n\ntype Options = {\n  action?: Action,\n  delay?: number\n};\n\ntype TypeEmptyValueMap = {\n  [key: string]: any\n};\n\nconst isUndefinedOrNull = (v: any) => v === undefined || v === null;\n\nconst isSame = (var1: any, var2: any) => (\n  var1 === var2\n  || (\n    !isUndefinedOrNull(var1) && !isUndefinedOrNull(var2) && var1.toString() === var2.toString()\n  )\n);\n\nconst TYPE_EMPTY_VALUE_MAP: TypeEmptyValueMap = {\n  'string': '',\n  'number': 0,\n  'boolean': false,\n  'array': []\n};\n\nconst isValidType = (value: any, allowNullAndUndefined = false) => {\n  if (\n    !(\n      Array.isArray(value)\n      || Object.keys(TYPE_EMPTY_VALUE_MAP).indexOf(typeof value) > -1\n      || (allowNullAndUndefined && (value === null || value === undefined))\n    )\n  ) {\n    console.log('isValidType', value);\n    throw new Error('useQueryState: the type is not supported.');\n  }\n}\n\nconst LOCATION_CHANGE = 'LOCATION_CHANGE';\nconst STATE_CHANGE = 'STATE_CHANGE';\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case LOCATION_CHANGE: {\n      const { currentQueryValue, key } = action.payload;\n      if (!isSame(currentQueryValue, state[key])) {\n        let normalizedValue = currentQueryValue;\n        if (currentQueryValue === '') {\n          // i.e. ?a=\n          // fill in empty value based on type\n          normalizedValue = TYPE_EMPTY_VALUE_MAP[state.type];\n        } else if (state.type === 'array' && !Array.isArray(currentQueryValue)) {\n          // i.e. ?a=1\n          // for single elemnt\n          // tranform to array type\n          normalizedValue = [currentQueryValue];\n        }\n        return {\n          ...state,\n          [key]: normalizedValue\n        }\n      }\n      return state;\n    }\n    case STATE_CHANGE: {\n      const { newValue, key } = action.payload;\n      return {\n        ...state,\n        [key]: newValue\n      }\n    }\n  }\n}\n\nconst useQueryState = (defaultValue: Value, varName: string, { action = 'push', delay = 0 }: Options = {}) => {\n  const location = useLocation();\n  const history = useHistory();\n\n  // get value type from defaultValue\n  isValidType(defaultValue);\n  const type = Array.isArray(defaultValue) ? 'array' : typeof defaultValue;\n\n  const [state, dispatch] = useReducer(reducer, { [varName]: defaultValue, type });\n  const timer = useRef<ReturnType<typeof setTimeout>>();\n  const isPending = useRef(false);\n  const isChanged = useRef(false);\n\n  // clear setTimeout\n  const clearTimer = useCallback(() => {\n    isPending.current = false;\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n  }, []);\n\n  // push or replace history\n  const manipulateHistory = useCallback((func: any, delay: number) => {\n    // debounce\n    isPending.current = true;\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    timer.current = setTimeout(() => {\n      isPending.current = false;\n      func();\n    }, delay);\n  }, []);\n\n  useEffect(() => {\n    // changing location\n    // sync state\n    if (!isPending.current) {\n      const { search } = location;\n      const parsedQuery = queryString.parse(search, { arrayFormat: 'comma' });\n      const queryValue: any = parsedQuery[varName];\n      // if query value is not supplied or state value is never changed\n      // preserve default value\n      if (\n        queryValue !== undefined\n        || isChanged.current\n      ) {\n        isChanged.current = true;\n        dispatch({\n          type: LOCATION_CHANGE,\n          payload: {\n            key: varName,\n            currentQueryValue: queryValue\n          }\n        });\n      }\n    }\n\n    return clearTimer;\n  }, [varName, location, clearTimer]);\n\n  const setVar = useCallback((newValue: Value | null | undefined) => {\n    isValidType(newValue, true);\n    // changing state\n    // sync location\n    // access location from history to ensure it is the most updated one\n    const { search, pathname } = history.location;\n    const parsedQuery = queryString.parse(search, { arrayFormat: 'comma' });\n    const queryVar = parsedQuery[varName];\n    if (!isSame(queryVar, newValue)) {\n      const newSearch = `?${queryString.stringify(\n        {\n          ...parsedQuery,\n          [varName]: newValue\n        }, {\n          arrayFormat: 'comma'\n        }\n      )}`;\n      \n      // mutate history object synchronously\n      history.location.search = newSearch;\n\n      // push or replace history state asynchronously\n      manipulateHistory(\n        history[action].bind(\n          null,\n          `${pathname}${newSearch}` as any\n        ),\n        delay\n      );\n    }\n    // sync state\n    dispatch({\n      type: STATE_CHANGE,\n      payload: {\n        key: varName,\n        newValue\n      }\n    });\n  }, [varName, action, delay, history, manipulateHistory]);\n\n  return [state![varName], setVar];\n};\n\nexport default useQueryState;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Link\n} from 'react-router-dom';\nimport GithubCorner from 'react-github-corner';\nimport Row from 'antd/es/row';\nimport 'antd/es/row/style/css';\nimport Col from 'antd/es/col';\nimport 'antd/es/col/style/css';\nimport Radio from 'antd/es/radio';\nimport 'antd/es/radio/style/css';\nimport Checkbox from 'antd/es/checkbox';\nimport 'antd/es/checkbox/style/css';\nimport Input from 'antd/es/input';\nimport 'antd/es/input/style/css';\nimport Select from 'antd/es/select';\nimport 'antd/es/select/style/css';\nimport Slider from 'antd/es/slider';\nimport 'antd/es/slider/style/css';\nimport Form from 'antd/es/form';\nimport 'antd/es/form/style/css';\nimport DatePicker from 'antd/es/date-picker';\nimport 'antd/es/date-picker/style/css';\nimport Button from 'antd/es/button';\nimport 'antd/es/button/style/css';\nimport moment from 'moment';\nimport useQueryState from './useQueryState';\nimport './App.css';\n\nconst { RangePicker } = DatePicker;\nconst tsToMoment = (ts: any) => ts ? moment(+ts) : null;\n\nconst PURPOSE_OPTIONS = [\n  {\n    text: 'Tourism',\n    value: '0'\n  },\n  {\n    text: 'Visiting family or friends',\n    value: '1'\n  },\n  {\n    text: 'Cultural',\n    value: '2'\n  },\n  {\n    text: 'Sports',\n    value: '3'\n  },\n  {\n    text: 'Official visit',\n    value: '4'\n  },\n  {\n    text: 'Medical reasons',\n    value: '5'\n  },\n  {\n    text: 'Study',\n    value: '6'\n  },\n  {\n    text: 'Transit',\n    value: '7'\n  },\n  {\n    text: 'Other',\n    value: '8'\n  }\n];\n\nconst UserForm = () => {\n  const [name, setName] = useQueryState('', 'name', { action: 'replace', delay: 300 });\n  const [gender, setGender] = useQueryState('', 'gender');\n  const [travelByYourself, setTravelByYourself] = useQueryState('', 'travelByYourself');\n  const [currency, setCurrency] = useQueryState(0, 'currency', { action: 'replace', delay: 300 });\n  const [purpose, setPurpose] = useQueryState(['1', '2', '3'], 'purpose');\n  const [startTime, setStartTime] = useQueryState('', 'startTime');\n  const [endTime, setEndTime] = useQueryState('', 'endTime');\n\n  const onInputChange = (evt: any) => {\n    setName(evt.target.value);\n  }\n\n  const onSelectChange = (value: any) => {\n    setGender(value);\n  }\n\n  const onRadioChange = (evt: any) => {\n    setTravelByYourself(evt.target.value);\n  }\n\n  const onCheckboxChange = (value: any) => {\n    setPurpose(value);\n  }\n\n  const onSliderChange = (value: any) => {\n    setCurrency(value);\n  }\n\n  const onRangePickerChange = (value: any) => {\n    setStartTime(value.length === 0 ? '' : `${+value[0]}`);\n    setEndTime(value.length === 0 ? '' : `${+value[1]}`);\n  }\n\n  return (\n    <>\n      <Row>\n        <Form\n          layout=\"horizontal\"\n          labelCol={{ span:  6}}\n          wrapperCol={{ span: 18 }}>\n          <Form.Item label=\"Name\">\n            <Input\n              placeholder=\"name\"\n              style={{ width: 200 }}\n              value={name}\n              onChange={onInputChange} />\n          </Form.Item>\n          <Form.Item label=\"Gender\" >\n              <Select\n                placeholder=\"gender\"\n                style={{ width: 100 }}\n                value={gender}\n                onChange={onSelectChange}>\n                <Select.Option key=\"0\">Male</Select.Option>\n                <Select.Option key=\"1\">Female</Select.Option>\n                <Select.Option key=\"2\">Other</Select.Option>\n              </Select>\n          </Form.Item>\n          <Form.Item label=\"Travel By Yourself\">\n            <Radio.Group\n              value={travelByYourself}\n              onChange={onRadioChange}>\n              <Radio value=\"0\">No</Radio>\n              <Radio value=\"1\">Yes</Radio>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item label=\"Total Currency Carried\" >\n            <Slider\n              style={{ width: 500 }}\n              tipFormatter={v => `${v / 10}k`}\n              min={0}\n              max={100}\n              marks={{\n                0: '0',\n                10: '1k',\n                30: '3k',\n                50: '5k',\n                70: '7k',\n                90: '9k',\n                100: '10k+'\n              }}\n              value={+currency}\n              onChange={onSliderChange}\n              />\n          </Form.Item>\n          <Form.Item label=\"Purpose of Travel\" >\n            <Checkbox.Group\n              style={{ width: '100%' }}\n              value={purpose}\n              onChange={onCheckboxChange}>\n              <Row>\n                {\n                  PURPOSE_OPTIONS.map(p => (\n                    <Col key={p.value} span={8}>\n                      <Checkbox value={p.value}>{ p.text }</Checkbox>\n                    </Col>\n                  ))\n                }\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item label=\"Travel Period\">\n            <RangePicker\n              value={[tsToMoment(startTime), tsToMoment(endTime)] as any}\n              onChange={onRangePickerChange} />\n          </Form.Item>\n          <Form.Item label=\"\" wrapperCol={{ offset: 6, span: 18 }}>\n            <Button\n              className=\"margin-right\"\n              type=\"primary\">\n              <Link to=\"/?name=Jason&gender=0&travelByYourself=1&currency=10&purpose=1,2&startTime=1573896342384&endTime=1576661142384\">Fill</Link>\n            </Button>\n            <Button\n              type=\"primary\">\n              <Link to=\"/\">\n                Reset\n              </Link>\n            </Button>\n          </Form.Item>\n        </Form>\n      </Row>\n    </>\n  )\n}\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      Use Query State\n    </div>\n  )\n}\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <div className=\"content\">\n          <UserForm />\n        </div>\n        <GithubCorner\n          bannerColor=\"#1890ff\"\n          href=\"https://github.com/yuanfux/use-query-state\" />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}